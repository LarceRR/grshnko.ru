import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { getUser, logoutUser, updateUser as updateUserApi } from "../api/user";
import { User } from "../types/user";

export const useUser = () => {
  const queryClient = useQueryClient();

  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ useQuery
  const {
    data: user,
    isLoading,
    error,
  } = useQuery<User | null>({
    queryKey: ["user"],
    queryFn: getUser,
    retry: false,
  });

  // ‚úÖ –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞
  const { mutateAsync: updateUser, isPending: isUpdating } = useMutation({
    mutationFn: (data: Partial<User>) => {
      return updateUserApi(user!.id, data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["user"] });
    },
  });

  // ‚úÖ –õ–æ–≥–∞—É—Ç
  const logout = async () => {
    try {
      await logoutUser();
      queryClient.setQueryData(["user"], null);
      queryClient.removeQueries({ queryKey: ["user"] });
      queryClient.clear(); // –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", err);
      throw err;
    }
  };

  return {
    user,
    isLoading,
    error,
    updateUser, // üëà –≤—ã–∑—ã–≤–∞—Ç—å —Ç–∞–∫: await updateUser({ firstName: "–ò–≤–∞–Ω" })
    isUpdating, // üëà –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
    logout,
  };
};
